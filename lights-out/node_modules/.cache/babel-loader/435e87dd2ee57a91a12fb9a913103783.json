{"ast":null,"code":"import _slicedToArray from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      /* const value = Math.random() > 0.5 ? true : false */\n      var board = Array(this.props.nrows).fill(null).map(function () {\n        return Array(_this2.props.ncols).fill(Math.random() > 0.5 ? true : false);\n      });\n      /* TODO: create array-of-arrays of true/false values */\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n      var hasWon = this.state.hasWon;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1);\n      var checkArr = board.flat(2);\n      hasWon = checkArr.every(function (value) {\n        return value === false;\n      });\n      console.log(hasWon); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var game = this.state.board;\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }\n      }, game.map(function (row, y) {\n        return row.map(function (el, x) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            isLit: el,\n            coord: \"\".concat(y, \"-\").concat(x),\n            flipCellsAround: _this3.flipCellsAround,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 24\n            }\n          });\n        });\n      })); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 3,\n  chanceLightStartOn: Math.random().toFixed(2)\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","Array","nrows","fill","map","ncols","Math","random","coord","split","Number","y","x","flipCell","checkArr","flat","every","value","console","log","setState","game","row","el","defaultProps","chanceLightStartOn","toFixed"],"sources":["D:/Downloads/react-udemy/lights-out/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 3,\n    ncols: 3,\n    chanceLightStartOn: Math.random().toFixed(2)\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board : this.createBoard()\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    /* const value = Math.random() > 0.5 ? true : false */\n    let board = Array(this.props.nrows).fill(null)\n      .map(() => Array(this.props.ncols).fill(\n        Math.random() > 0.5 ? true : false\n    ))\n      \n    /* TODO: create array-of-arrays of true/false values */\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    \n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let hasWon = this.state.hasWon\n    let [y, x] = coord.split(\"-\").map(Number);\n    \n   \n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n      \n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x)\n    flipCell(y-1,x)\n    flipCell(y+1,x)\n    flipCell(y,x+1)\n    flipCell(y,x-1)\n    \n    let checkArr = board.flat(2)\n    hasWon = checkArr.every(value=>value===false)\n    console.log(hasWon)\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({ board, hasWon });\n    \n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    let game = this.state.board\n    \n    return(\n      <table className=\"Board\">\n        \n        {game.map((row,y)=>row\n          .map((el,x)=><Cell isLit={el} coord={`${y}-${x}`} flipCellsAround={this.flipCellsAround} />))}\n      </table>\n      \n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}