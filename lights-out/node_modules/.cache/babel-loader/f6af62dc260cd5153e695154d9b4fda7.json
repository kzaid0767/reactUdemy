{"ast":null,"code":"import _slicedToArray from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Downloads\\\\react-udemy\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      //const value = Math.random() > 0.5 ? true : false\n      var board = Array.from(this.props.nrows).map(function () {\n        return Math.random() > 0.3 ? true : false;\n      }); // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({ board, hasWon });\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, this.state.board.map(function (el) {\n        return el.map(function (El) {\n          return El.map(function (innerEl) {\n            return /*#__PURE__*/React.createElement(Cell, {\n              isLit: innerEl,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 62\n              }\n            });\n          });\n        });\n      })); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 4,\n  ncols: 4,\n  chanceLightStartOn: Math.random().toFixed(2)\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","Array","from","nrows","map","Math","random","coord","ncols","split","Number","y","x","flipCell","el","El","innerEl","defaultProps","chanceLightStartOn","toFixed"],"sources":["D:/Downloads/react-udemy/lights-out/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 4,\n    ncols: 4,\n    chanceLightStartOn: Math.random().toFixed(2)\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board : this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    //const value = Math.random() > 0.5 ? true : false\n    let board = Array.from(this.props.nrows).map(()=>\n      Math.random() > 0.3 ? true : false\n      );\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n   // this.setState({ board, hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    \n    return(\n      <table className=\"Board\">\n        {this.state.board.map(el=>el.map(El=>El.map(innerEl=><Cell isLit={innerEl} />)))}\n      </table>\n      \n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;EAQJ,eAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,2EAAMA,KAAN,GADiB,CAGjB;;IACA,MAAKC,KAAL,GAAa;MACXC,MAAM,EAAE,KADG;MAEXC,KAAK,EAAG,MAAKC,WAAL;IAFG,CAAb;IAJiB;EAQlB;EAED;;;;;kCAEc;MACZ;MACA,IAAID,KAAK,GAAGE,KAAK,CAACC,IAAN,CAAW,KAAKN,KAAL,CAAWO,KAAtB,EAA6BC,GAA7B,CAAiC;QAAA,OAC3CC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,IAAtB,GAA6B,KADc;MAAA,CAAjC,CAAZ,CAFY,CAKZ;;MACA,OAAOP,KAAP;IACD;IAED;;;;oCAEgBQ,K,EAAO;MAAA,kBACE,KAAKX,KADP;MAAA,IACfY,KADe,eACfA,KADe;MAAA,IACRL,KADQ,eACRA,KADQ;MAErB,IAAIJ,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;MAFqB,uBAGRQ,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBL,GAAjB,CAAqBM,MAArB,CAHQ;MAAA;MAAA,IAGhBC,CAHgB;MAAA,IAGbC,CAHa;;MAMrB,SAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;QACtB;QAEA,IAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGJ,KAAd,IAAuBG,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGR,KAAzC,EAAgD;UAC9CJ,KAAK,CAACY,CAAD,CAAL,CAASC,CAAT,IAAc,CAACb,KAAK,CAACY,CAAD,CAAL,CAASC,CAAT,CAAf;QACD;MACF,CAZoB,CAcrB;MAEA;MACA;MAED;;IACA;IAGD;;;;6BAES;MAAA;;MAEP,oBACE;QAAO,SAAS,EAAC,OAAjB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACG,KAAKf,KAAL,CAAWE,KAAX,CAAiBK,GAAjB,CAAqB,UAAAU,EAAE;QAAA,OAAEA,EAAE,CAACV,GAAH,CAAO,UAAAW,EAAE;UAAA,OAAEA,EAAE,CAACX,GAAH,CAAO,UAAAY,OAAO;YAAA,oBAAE,oBAAC,IAAD;cAAM,KAAK,EAAEA,OAAb;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EAAF;UAAA,CAAd,CAAF;QAAA,CAAT,CAAF;MAAA,CAAvB,CADH,CADF,CAFO,CASP;MAEA;MAEA;MAEA;IACD;;;;EAxEiBvB,S;;AAAdE,K,CAEGsB,Y,GAAe;EACpBd,KAAK,EAAE,CADa;EAEpBK,KAAK,EAAE,CAFa;EAGpBU,kBAAkB,EAAEb,IAAI,CAACC,MAAL,GAAca,OAAd,CAAsB,CAAtB;AAHA,C;AA0ExB,eAAexB,KAAf"},"metadata":{},"sourceType":"module"}